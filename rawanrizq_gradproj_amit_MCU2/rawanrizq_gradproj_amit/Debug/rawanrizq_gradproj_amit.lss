
rawanrizq_gradproj_amit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085a  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000608  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040a  00000000  00000000  0000109e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_init>:
{
	CLR_BIT(LED1_PORT, LED1_PIN);
}
void LED1_Toggle(void)
{
	Toggle_BIT(LED1_PORT, LED1_PIN);
  6c:	a2 9a       	sbi	0x14, 2	; 20
  6e:	8b 9a       	sbi	0x11, 3	; 17
  70:	08 95       	ret

00000072 <LED1_On>:
  72:	aa 9a       	sbi	0x15, 2	; 21
  74:	08 95       	ret

00000076 <LED1_Off>:
  76:	aa 98       	cbi	0x15, 2	; 21
  78:	08 95       	ret

0000007a <LED2_On>:
}


void LED2_On(void)
{
	SET_BIT(LED2_PORT, LED2_PIN);
  7a:	93 9a       	sbi	0x12, 3	; 18
  7c:	08 95       	ret

0000007e <LED2_Off>:
}
void LED2_Off(void)
{
	CLR_BIT(LED2_PORT, LED2_PIN);
  7e:	93 98       	cbi	0x12, 3	; 18
  80:	08 95       	ret

00000082 <main>:
#include "LED.h"

int main(void)
{
	uint8 type_massage;
	SLAVE_INIT();
  82:	0e 94 5e 00 	call	0xbc	; 0xbc <SLAVE_INIT>
	LED_init();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <LED_init>
	
	while (1)
	{
		type_massage = SPI_REC();
  8a:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_REC>
		
		switch( type_massage )
  8e:	82 34       	cpi	r24, 0x42	; 66
  90:	61 f0       	breq	.+24     	; 0xaa <main+0x28>
  92:	18 f4       	brcc	.+6      	; 0x9a <main+0x18>
  94:	81 34       	cpi	r24, 0x41	; 65
  96:	31 f0       	breq	.+12     	; 0xa4 <main+0x22>
  98:	f8 cf       	rjmp	.-16     	; 0x8a <main+0x8>
  9a:	83 34       	cpi	r24, 0x43	; 67
  9c:	49 f0       	breq	.+18     	; 0xb0 <main+0x2e>
  9e:	84 34       	cpi	r24, 0x44	; 68
  a0:	51 f0       	breq	.+20     	; 0xb6 <main+0x34>
  a2:	f3 cf       	rjmp	.-26     	; 0x8a <main+0x8>
		{
			
			case TURN_ON_LED_ROOM1:
			LED1_On();
  a4:	0e 94 39 00 	call	0x72	; 0x72 <LED1_On>
			break;
  a8:	f0 cf       	rjmp	.-32     	; 0x8a <main+0x8>
			
			case  TURN_OFF_LED_ROOM1:
			LED1_Off();
  aa:	0e 94 3b 00 	call	0x76	; 0x76 <LED1_Off>
			break;
  ae:	ed cf       	rjmp	.-38     	; 0x8a <main+0x8>
			
			case  TURN_ON_LED_ROOM2:
			LED2_On();
  b0:	0e 94 3d 00 	call	0x7a	; 0x7a <LED2_On>
			break;
  b4:	ea cf       	rjmp	.-44     	; 0x8a <main+0x8>
			
			case  TURN_OFF_LED_ROOM2:
			LED2_Off();
  b6:	0e 94 3f 00 	call	0x7e	; 0x7e <LED2_Off>
			break;
  ba:	e7 cf       	rjmp	.-50     	; 0x8a <main+0x8>

000000bc <SLAVE_INIT>:

void SPI_SEND( uint8 IMFO )
{
	SPDR = IMFO ;
	while(GET_BIT(SPSR, SPIF) == 0);  
}
  bc:	be 9a       	sbi	0x17, 6	; 23
  be:	6e 9a       	sbi	0x0d, 6	; 13
  c0:	6b 98       	cbi	0x0d, 3	; 13
  c2:	6a 98       	cbi	0x0d, 2	; 13
  c4:	08 95       	ret

000000c6 <SPI_REC>:

uint8 SPI_REC()
{
	while(GET_BIT(SPSR, SPIF) == 0);  
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <SPI_REC>
	return SPDR;
  ca:	8f b1       	in	r24, 0x0f	; 15
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
